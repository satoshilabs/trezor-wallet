'use strict';

exports.__esModule = true;
exports.parse = exports.DEFAULT_PRIORITY = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Initial settings for connect.
 * It could be changed by passing values into TrezorConnect.init(...) method
 */

var VERSION = '5.0.33';
var versionN = VERSION.split('.').map(function (s) {
    return parseInt(s);
});
var DIRECTORY = '' + versionN[0] + (versionN[1] > 0 ? '.' + versionN[1] : '') + '/';
var DEFAULT_DOMAIN = 'https://connect.trezor.io/' + DIRECTORY;
var DEFAULT_PRIORITY = exports.DEFAULT_PRIORITY = 2;

var initialSettings = {
    configSrc: 'data/config.json', // constant
    debug: false,
    origin: null,
    priority: DEFAULT_PRIORITY,
    trustedHost: false,
    connectSrc: DEFAULT_DOMAIN,
    iframeSrc: DEFAULT_DOMAIN + 'iframe.html',
    popup: true,
    popupSrc: DEFAULT_DOMAIN + 'popup.html',
    webusbSrc: DEFAULT_DOMAIN + 'webusb.html',
    transportReconnect: false,
    webusb: true,
    pendingTransportEvent: true,
    supportedBrowser: !/Trident|MSIE/.test(navigator.userAgent),
    extension: null
};

var currentSettings = initialSettings;

var parse = exports.parse = function parse(input) {
    if (!input) return currentSettings;

    var settings = (0, _extends3.default)({}, currentSettings);
    if (input.hasOwnProperty('debug')) {
        if (Array.isArray(input)) {
            // enable log with prefix
        }if (typeof input.debug === 'boolean') {
            settings.debug = input.debug;
        } else if (typeof input.debug === 'string') {
            settings.debug = input.debug === 'true';
        }
    }

    if (typeof input.connectSrc === 'string') {
        // TODO: escape string, validate url
        settings.connectSrc = input.connectSrc;
    } else if (typeof window !== 'undefined' && typeof window.__TREZOR_CONNECT_SRC === 'string') {
        settings.connectSrc = window.__TREZOR_CONNECT_SRC;
    }
    settings.iframeSrc = settings.connectSrc + 'iframe.html';
    settings.popupSrc = settings.connectSrc + 'popup.html';
    settings.webusbSrc = settings.connectSrc + 'webusb.html';

    if (typeof input.transportReconnect === 'boolean') {
        settings.transportReconnect = input.transportReconnect;
    }

    if (typeof input.webusb === 'boolean') {
        settings.webusb = input.webusb;
    }

    if (typeof input.popup === 'boolean') {
        settings.popup = input.popup;
    }

    if (typeof input.pendingTransportEvent === 'boolean') {
        settings.pendingTransportEvent = input.pendingTransportEvent;
    }

    // local files
    if (window.location.protocol === 'file:') {
        settings.origin = window.location.origin + window.location.pathname;
        settings.webusb = false;
    }

    if (typeof input.extension === 'string') {
        settings.extension = input.extension;
    }

    // $FlowIssue: settings.excludedDevices field is intentionally not defined in flowtype. it's used only in tests to exclude debug-link device.
    settings.excludedDevices = input.excludedDevices;

    currentSettings = settings;
    return currentSettings;
};