'use strict';

/**
 * (C) 2017 SatoshiLabs
 * GPLv3
 */

exports.__esModule = true;
exports.BLOCKCHAIN_EVENT = exports.TRANSPORT_EVENT = exports.DEVICE_EVENT = exports.UI_EVENT = exports.BLOCKCHAIN = exports.DEVICE = exports.UI = exports.TRANSPORT = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

var _constants = require('./constants');

var _transport = require('./constants/transport');

var TRANSPORT = _interopRequireWildcard(_transport);

var _popup = require('./constants/popup');

var POPUP = _interopRequireWildcard(_popup);

var _iframe = require('./constants/iframe');

var IFRAME = _interopRequireWildcard(_iframe);

var _ui = require('./constants/ui');

var UI = _interopRequireWildcard(_ui);

var _device = require('./constants/device');

var DEVICE = _interopRequireWildcard(_device);

var _blockchain = require('./constants/blockchain');

var BLOCKCHAIN = _interopRequireWildcard(_blockchain);

var _errors = require('./constants/errors');

var _PopupManager = require('./popup/PopupManager');

var _PopupManager2 = _interopRequireDefault(_PopupManager);

var _builder = require('./iframe/builder');

var iframe = _interopRequireWildcard(_builder);

var _button = require('./webusb/button');

var _button2 = _interopRequireDefault(_button);

var _debug = require('./utils/debug');

var _debug2 = _interopRequireDefault(_debug);

var _message = require('./message');

var _ConnectSettings = require('./data/ConnectSettings');

var _types = require('./types');

var $T = _interopRequireWildcard(_types);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var eventEmitter = new _events2.default();
var _log = (0, _debug.init)('[trezor-connect.js]');

var _settings = void 0;
var _popupManager = void 0;

var initPopupManager = function initPopupManager() {
    var pm = new _PopupManager2.default(_settings);
    pm.on(POPUP.CLOSED, function () {
        iframe.postMessage({ type: POPUP.CLOSED }, false);
    });
    return pm;
};

// handle message received from iframe
var handleMessage = function handleMessage(messageEvent) {
    // ignore messages from domain other then iframe origin
    if (messageEvent.origin !== iframe.origin) return;

    var message = (0, _message.parseMessage)(messageEvent.data);
    // TODO: destructuring with type
    // https://github.com/Microsoft/TypeScript/issues/240
    // const { id, event, type, data, error }: CoreMessage = message;
    var id = message.id || 0;
    var event = message.event;
    var type = message.type;
    var payload = message.payload;

    _log.log('handleMessage', message);

    switch (event) {
        case _constants.RESPONSE_EVENT:
            if (iframe.messagePromises[id]) {
                // clear unnecessary fields from message object
                delete message.type;
                delete message.event;
                // delete message.id;
                // message.__id = id;
                // resolve message promise (send result of call method)
                iframe.messagePromises[id].resolve(message);
                delete iframe.messagePromises[id];
            } else {
                _log.warn('Unknown message id ' + id);
            }
            break;

        case _constants.DEVICE_EVENT:
            // pass DEVICE event up to html
            eventEmitter.emit(event, message);
            eventEmitter.emit(type, payload); // DEVICE_EVENT also emit single events (connect/disconnect...)
            break;

        case _constants.TRANSPORT_EVENT:
            eventEmitter.emit(event, message);
            eventEmitter.emit(type, payload);
            break;

        case _constants.BLOCKCHAIN_EVENT:
            eventEmitter.emit(event, message);
            eventEmitter.emit(type, payload);
            break;

        case _constants.UI_EVENT:

            if (type === IFRAME.BOOTSTRAP) {
                iframe.clearTimeout();
                break;
            } else if (type === POPUP.BOOTSTRAP) {
                // Popup did open but is still loading JS
                _popupManager.cancelOpenTimeout();
                break;
            }

            // pass UI event up
            eventEmitter.emit(event, message);
            eventEmitter.emit(type, payload);

            if (type === UI.IFRAME_HANDSHAKE) {
                if (payload.error) {
                    iframe.initPromise.reject(new Error(payload.error));
                } else {
                    _popupManager.setBroadcast(payload.broadcast);
                    iframe.initPromise.resolve();
                }
            } else if (type === POPUP.CANCEL_POPUP_REQUEST) {
                _popupManager.cancel();
            } else if (type === UI.CLOSE_UI_WINDOW) {
                _popupManager.close();
            }
            break;

        default:
            _log.log('Undefined message', event, messageEvent);
    }
};

var init = function () {
    var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
        var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return _regenerator2.default.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        if (!iframe.instance) {
                            _context.next = 2;
                            break;
                        }

                        throw _errors.IFRAME_INITIALIZED;

                    case 2:

                        if (!_settings) {
                            _settings = (0, _ConnectSettings.parse)(settings);
                        }

                        if (_settings.supportedBrowser) {
                            _context.next = 5;
                            break;
                        }

                        throw new Error('Unsupported browser');

                    case 5:

                        if (!_popupManager) {
                            _popupManager = initPopupManager();
                        }

                        _log.enabled = _settings.debug;

                        window.addEventListener('message', handleMessage);
                        window.addEventListener('beforeunload', function () {
                            if (_popupManager) {
                                _popupManager.onBeforeUnload();
                            }

                            iframe.dispose();
                        });

                        _context.next = 11;
                        return iframe.init(_settings);

                    case 11:
                    case 'end':
                        return _context.stop();
                }
            }
        }, _callee, undefined);
    }));

    return function init() {
        return _ref.apply(this, arguments);
    };
}();

var call = function () {
    var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(params) {
        var response;
        return _regenerator2.default.wrap(function _callee2$(_context2) {
            while (1) {
                switch (_context2.prev = _context2.next) {
                    case 0:
                        if (!(!iframe.instance && !iframe.timeout)) {
                            _context2.next = 17;
                            break;
                        }

                        // init popup with lazy loading before iframe initialization
                        _settings = (0, _ConnectSettings.parse)({});
                        _popupManager = initPopupManager();
                        _popupManager.request(true);

                        if (_settings.supportedBrowser) {
                            _context2.next = 6;
                            break;
                        }

                        return _context2.abrupt('return', { success: false, payload: { error: 'Unsupported browser' } });

                    case 6:
                        _context2.prev = 6;
                        _context2.next = 9;
                        return init(_settings);

                    case 9:
                        _context2.next = 11;
                        return _popupManager.resolveLazyLoad();

                    case 11:
                        _context2.next = 17;
                        break;

                    case 13:
                        _context2.prev = 13;
                        _context2.t0 = _context2['catch'](6);

                        _popupManager.close();
                        return _context2.abrupt('return', { success: false, payload: { error: _context2.t0 } });

                    case 17:
                        if (!iframe.timeout) {
                            _context2.next = 21;
                            break;
                        }

                        return _context2.abrupt('return', { success: false, payload: { error: _errors.NO_IFRAME.message } });

                    case 21:
                        if (!iframe.error) {
                            _context2.next = 23;
                            break;
                        }

                        return _context2.abrupt('return', { success: false, payload: { error: iframe.error } });

                    case 23:

                        // request popup window it might be used in the future
                        // if (eventEmitter.listeners(UI_EVENT).length < 1) { _popupManager.request(params); }
                        if (_settings.popup) {
                            _popupManager.request();
                        }

                        // post message to iframe
                        _context2.prev = 24;
                        _context2.next = 27;
                        return iframe.postMessage({ type: IFRAME.CALL, payload: params });

                    case 27:
                        response = _context2.sent;

                        if (!response) {
                            _context2.next = 33;
                            break;
                        }

                        // TODO: unlock popupManager request only if there wasn't error "in progress"
                        if (response.payload.error !== _errors.DEVICE_CALL_IN_PROGRESS.message) {
                            _popupManager.unlock();
                        }
                        return _context2.abrupt('return', response);

                    case 33:
                        _popupManager.unlock();
                        // TODO
                        return _context2.abrupt('return', { success: false, payload: { error: 'No response from iframe' } });

                    case 35:
                        _context2.next = 41;
                        break;

                    case 37:
                        _context2.prev = 37;
                        _context2.t1 = _context2['catch'](24);

                        _log.error('__call error', _context2.t1);
                        return _context2.abrupt('return', _context2.t1);

                    case 41:
                    case 'end':
                        return _context2.stop();
                }
            }
        }, _callee2, undefined, [[6, 13], [24, 37]]);
    }));

    return function call(_x2) {
        return _ref2.apply(this, arguments);
    };
}();

var customMessageResponse = function customMessageResponse(payload) {
    iframe.postMessage({
        event: _constants.UI_EVENT,
        type: UI.CUSTOM_MESSAGE_RESPONSE,
        payload: payload
    });
};

var TrezorConnect = function TrezorConnect() {
    (0, _classCallCheck3.default)(this, TrezorConnect);
};

TrezorConnect.init = function () {
    var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(settings) {
        return _regenerator2.default.wrap(function _callee3$(_context3) {
            while (1) {
                switch (_context3.prev = _context3.next) {
                    case 0:
                        _context3.next = 2;
                        return init(settings);

                    case 2:
                        return _context3.abrupt('return', _context3.sent);

                    case 3:
                    case 'end':
                        return _context3.stop();
                }
            }
        }, _callee3, undefined);
    }));

    return function (_x3) {
        return _ref3.apply(this, arguments);
    };
}();

TrezorConnect.on = function (type, fn) {
    eventEmitter.on(type, fn);
};

TrezorConnect.off = function (type, fn) {
    eventEmitter.removeListener(type, fn);
};

TrezorConnect.uiResponse = function (response) {
    iframe.postMessage((0, _extends3.default)({ event: _constants.UI_EVENT }, response));
};

TrezorConnect.changeSettings = function (settings) {
    var parsedSettings = (0, _ConnectSettings.parse)(settings);
    _log.enabled = parsedSettings.debug;
    iframe.postMessage({ type: UI.CHANGE_SETTINGS, payload: parsedSettings }, false);
};

TrezorConnect.blockchainSubscribe = function () {
    var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(params) {
        return _regenerator2.default.wrap(function _callee4$(_context4) {
            while (1) {
                switch (_context4.prev = _context4.next) {
                    case 0:
                        _context4.next = 2;
                        return call((0, _extends3.default)({ method: 'blockchainSubscribe' }, params));

                    case 2:
                        return _context4.abrupt('return', _context4.sent);

                    case 3:
                    case 'end':
                        return _context4.stop();
                }
            }
        }, _callee4, undefined);
    }));

    return function (_x4) {
        return _ref4.apply(this, arguments);
    };
}();

TrezorConnect.customMessage = function () {
    var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6(params) {
        var callback, customMessageListener, response;
        return _regenerator2.default.wrap(function _callee6$(_context6) {
            while (1) {
                switch (_context6.prev = _context6.next) {
                    case 0:
                        if (!(typeof params.callback !== 'function')) {
                            _context6.next = 2;
                            break;
                        }

                        return _context6.abrupt('return', {
                            success: false,
                            payload: {
                                error: 'Parameter "callback" is not a function'
                            }
                        });

                    case 2:

                        // TODO: set message listener only if iframe is loaded correctly
                        callback = params.callback;

                        delete params.callback;

                        customMessageListener = function () {
                            var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(event) {
                                var data, payload;
                                return _regenerator2.default.wrap(function _callee5$(_context5) {
                                    while (1) {
                                        switch (_context5.prev = _context5.next) {
                                            case 0:
                                                data = event.data;

                                                if (!(data && data.type === UI.CUSTOM_MESSAGE_REQUEST)) {
                                                    _context5.next = 6;
                                                    break;
                                                }

                                                _context5.next = 4;
                                                return callback(data.payload);

                                            case 4:
                                                payload = _context5.sent;

                                                if (payload) {
                                                    customMessageResponse(payload);
                                                } else {
                                                    customMessageResponse({ message: 'release' });
                                                }

                                            case 6:
                                            case 'end':
                                                return _context5.stop();
                                        }
                                    }
                                }, _callee5, undefined);
                            }));

                            return function customMessageListener(_x6) {
                                return _ref6.apply(this, arguments);
                            };
                        }();

                        window.addEventListener('message', customMessageListener, false);

                        _context6.next = 8;
                        return call((0, _extends3.default)({ method: 'customMessage' }, params));

                    case 8:
                        response = _context6.sent;

                        window.removeEventListener('message', customMessageListener);
                        return _context6.abrupt('return', response);

                    case 11:
                    case 'end':
                        return _context6.stop();
                }
            }
        }, _callee6, undefined);
    }));

    return function (_x5) {
        return _ref5.apply(this, arguments);
    };
}();

TrezorConnect.requestLogin = function () {
    var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee8(params) {
        var callback, loginChallengeListener, response;
        return _regenerator2.default.wrap(function _callee8$(_context8) {
            while (1) {
                switch (_context8.prev = _context8.next) {
                    case 0:
                        if (!(typeof params.callback === 'function')) {
                            _context8.next = 12;
                            break;
                        }

                        callback = params.callback;

                        delete params.callback; // delete callback value. this field cannot be sent using postMessage function

                        // TODO: set message listener only if iframe is loaded correctly

                        loginChallengeListener = function () {
                            var _ref8 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee7(event) {
                                var data, payload;
                                return _regenerator2.default.wrap(function _callee7$(_context7) {
                                    while (1) {
                                        switch (_context7.prev = _context7.next) {
                                            case 0:
                                                data = event.data;

                                                if (!(data && data.type === UI.LOGIN_CHALLENGE_REQUEST)) {
                                                    _context7.next = 6;
                                                    break;
                                                }

                                                _context7.next = 4;
                                                return callback();

                                            case 4:
                                                payload = _context7.sent;

                                                iframe.postMessage({
                                                    event: _constants.UI_EVENT,
                                                    type: UI.LOGIN_CHALLENGE_RESPONSE,
                                                    payload: payload
                                                });

                                            case 6:
                                            case 'end':
                                                return _context7.stop();
                                        }
                                    }
                                }, _callee7, undefined);
                            }));

                            return function loginChallengeListener(_x8) {
                                return _ref8.apply(this, arguments);
                            };
                        }();

                        window.addEventListener('message', loginChallengeListener, false);

                        _context8.next = 7;
                        return call((0, _extends3.default)({ method: 'requestLogin' }, params, { asyncChallenge: true }));

                    case 7:
                        response = _context8.sent;

                        window.removeEventListener('message', loginChallengeListener);
                        return _context8.abrupt('return', response);

                    case 12:
                        _context8.next = 14;
                        return call((0, _extends3.default)({ method: 'requestLogin' }, params));

                    case 14:
                        return _context8.abrupt('return', _context8.sent);

                    case 15:
                    case 'end':
                        return _context8.stop();
                }
            }
        }, _callee8, undefined);
    }));

    return function (_x7) {
        return _ref7.apply(this, arguments);
    };
}();

TrezorConnect.cardanoGetAddress = function () {
    var _ref9 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee9(params) {
        return _regenerator2.default.wrap(function _callee9$(_context9) {
            while (1) {
                switch (_context9.prev = _context9.next) {
                    case 0:
                        _context9.next = 2;
                        return call((0, _extends3.default)({ method: 'cardanoGetAddress' }, params));

                    case 2:
                        return _context9.abrupt('return', _context9.sent);

                    case 3:
                    case 'end':
                        return _context9.stop();
                }
            }
        }, _callee9, undefined);
    }));

    return function (_x9) {
        return _ref9.apply(this, arguments);
    };
}();

TrezorConnect.cardanoGetPublicKey = function () {
    var _ref10 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee10(params) {
        return _regenerator2.default.wrap(function _callee10$(_context10) {
            while (1) {
                switch (_context10.prev = _context10.next) {
                    case 0:
                        _context10.next = 2;
                        return call((0, _extends3.default)({ method: 'cardanoGetPublicKey' }, params));

                    case 2:
                        return _context10.abrupt('return', _context10.sent);

                    case 3:
                    case 'end':
                        return _context10.stop();
                }
            }
        }, _callee10, undefined);
    }));

    return function (_x10) {
        return _ref10.apply(this, arguments);
    };
}();

TrezorConnect.cardanoSignTransaction = function () {
    var _ref11 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee11(params) {
        return _regenerator2.default.wrap(function _callee11$(_context11) {
            while (1) {
                switch (_context11.prev = _context11.next) {
                    case 0:
                        _context11.next = 2;
                        return call((0, _extends3.default)({ method: 'cardanoSignTransaction' }, params));

                    case 2:
                        return _context11.abrupt('return', _context11.sent);

                    case 3:
                    case 'end':
                        return _context11.stop();
                }
            }
        }, _callee11, undefined);
    }));

    return function (_x11) {
        return _ref11.apply(this, arguments);
    };
}();

TrezorConnect.cipherKeyValue = function () {
    var _ref12 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee12(params) {
        return _regenerator2.default.wrap(function _callee12$(_context12) {
            while (1) {
                switch (_context12.prev = _context12.next) {
                    case 0:
                        _context12.next = 2;
                        return call((0, _extends3.default)({ method: 'cipherKeyValue' }, params));

                    case 2:
                        return _context12.abrupt('return', _context12.sent);

                    case 3:
                    case 'end':
                        return _context12.stop();
                }
            }
        }, _callee12, undefined);
    }));

    return function (_x12) {
        return _ref12.apply(this, arguments);
    };
}();

TrezorConnect.composeTransaction = function () {
    var _ref13 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee13(params) {
        return _regenerator2.default.wrap(function _callee13$(_context13) {
            while (1) {
                switch (_context13.prev = _context13.next) {
                    case 0:
                        _context13.next = 2;
                        return call((0, _extends3.default)({ method: 'composeTransaction' }, params));

                    case 2:
                        return _context13.abrupt('return', _context13.sent);

                    case 3:
                    case 'end':
                        return _context13.stop();
                }
            }
        }, _callee13, undefined);
    }));

    return function (_x13) {
        return _ref13.apply(this, arguments);
    };
}();

TrezorConnect.ethereumGetAccountInfo = function () {
    var _ref14 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee14(params) {
        return _regenerator2.default.wrap(function _callee14$(_context14) {
            while (1) {
                switch (_context14.prev = _context14.next) {
                    case 0:
                        _context14.next = 2;
                        return call((0, _extends3.default)({ method: 'ethereumGetAccountInfo' }, params));

                    case 2:
                        return _context14.abrupt('return', _context14.sent);

                    case 3:
                    case 'end':
                        return _context14.stop();
                }
            }
        }, _callee14, undefined);
    }));

    return function (_x14) {
        return _ref14.apply(this, arguments);
    };
}();

TrezorConnect.ethereumGetAddress = function () {
    var _ref15 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee15(params) {
        return _regenerator2.default.wrap(function _callee15$(_context15) {
            while (1) {
                switch (_context15.prev = _context15.next) {
                    case 0:
                        _context15.next = 2;
                        return call((0, _extends3.default)({ method: 'ethereumGetAddress' }, params));

                    case 2:
                        return _context15.abrupt('return', _context15.sent);

                    case 3:
                    case 'end':
                        return _context15.stop();
                }
            }
        }, _callee15, undefined);
    }));

    return function (_x15) {
        return _ref15.apply(this, arguments);
    };
}();

TrezorConnect.ethereumSignMessage = function () {
    var _ref16 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee16(params) {
        return _regenerator2.default.wrap(function _callee16$(_context16) {
            while (1) {
                switch (_context16.prev = _context16.next) {
                    case 0:
                        _context16.next = 2;
                        return call((0, _extends3.default)({ method: 'ethereumSignMessage' }, params));

                    case 2:
                        return _context16.abrupt('return', _context16.sent);

                    case 3:
                    case 'end':
                        return _context16.stop();
                }
            }
        }, _callee16, undefined);
    }));

    return function (_x16) {
        return _ref16.apply(this, arguments);
    };
}();

TrezorConnect.ethereumSignTransaction = function () {
    var _ref17 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee17(params) {
        return _regenerator2.default.wrap(function _callee17$(_context17) {
            while (1) {
                switch (_context17.prev = _context17.next) {
                    case 0:
                        _context17.next = 2;
                        return call((0, _extends3.default)({ method: 'ethereumSignTransaction' }, params));

                    case 2:
                        return _context17.abrupt('return', _context17.sent);

                    case 3:
                    case 'end':
                        return _context17.stop();
                }
            }
        }, _callee17, undefined);
    }));

    return function (_x17) {
        return _ref17.apply(this, arguments);
    };
}();

TrezorConnect.ethereumVerifyMessage = function () {
    var _ref18 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee18(params) {
        return _regenerator2.default.wrap(function _callee18$(_context18) {
            while (1) {
                switch (_context18.prev = _context18.next) {
                    case 0:
                        _context18.next = 2;
                        return call((0, _extends3.default)({ method: 'ethereumVerifyMessage' }, params));

                    case 2:
                        return _context18.abrupt('return', _context18.sent);

                    case 3:
                    case 'end':
                        return _context18.stop();
                }
            }
        }, _callee18, undefined);
    }));

    return function (_x18) {
        return _ref18.apply(this, arguments);
    };
}();

TrezorConnect.getAccountInfo = function () {
    var _ref19 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee19(params) {
        return _regenerator2.default.wrap(function _callee19$(_context19) {
            while (1) {
                switch (_context19.prev = _context19.next) {
                    case 0:
                        _context19.next = 2;
                        return call((0, _extends3.default)({ method: 'getAccountInfo' }, params));

                    case 2:
                        return _context19.abrupt('return', _context19.sent);

                    case 3:
                    case 'end':
                        return _context19.stop();
                }
            }
        }, _callee19, undefined);
    }));

    return function (_x19) {
        return _ref19.apply(this, arguments);
    };
}();

TrezorConnect.getAddress = function () {
    var _ref20 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee20(params) {
        return _regenerator2.default.wrap(function _callee20$(_context20) {
            while (1) {
                switch (_context20.prev = _context20.next) {
                    case 0:
                        _context20.next = 2;
                        return call((0, _extends3.default)({ method: 'getAddress' }, params));

                    case 2:
                        return _context20.abrupt('return', _context20.sent);

                    case 3:
                    case 'end':
                        return _context20.stop();
                }
            }
        }, _callee20, undefined);
    }));

    return function (_x20) {
        return _ref20.apply(this, arguments);
    };
}();

TrezorConnect.getDeviceState = function () {
    var _ref21 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee21(params) {
        return _regenerator2.default.wrap(function _callee21$(_context21) {
            while (1) {
                switch (_context21.prev = _context21.next) {
                    case 0:
                        _context21.next = 2;
                        return call((0, _extends3.default)({ method: 'getDeviceState' }, params));

                    case 2:
                        return _context21.abrupt('return', _context21.sent);

                    case 3:
                    case 'end':
                        return _context21.stop();
                }
            }
        }, _callee21, undefined);
    }));

    return function (_x21) {
        return _ref21.apply(this, arguments);
    };
}();

TrezorConnect.getFeatures = function () {
    var _ref22 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee22(params) {
        return _regenerator2.default.wrap(function _callee22$(_context22) {
            while (1) {
                switch (_context22.prev = _context22.next) {
                    case 0:
                        _context22.next = 2;
                        return call((0, _extends3.default)({ method: 'getFeatures' }, params));

                    case 2:
                        return _context22.abrupt('return', _context22.sent);

                    case 3:
                    case 'end':
                        return _context22.stop();
                }
            }
        }, _callee22, undefined);
    }));

    return function (_x22) {
        return _ref22.apply(this, arguments);
    };
}();

TrezorConnect.getPublicKey = function () {
    var _ref23 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee23(params) {
        return _regenerator2.default.wrap(function _callee23$(_context23) {
            while (1) {
                switch (_context23.prev = _context23.next) {
                    case 0:
                        _context23.next = 2;
                        return call((0, _extends3.default)({ method: 'getPublicKey' }, params));

                    case 2:
                        return _context23.abrupt('return', _context23.sent);

                    case 3:
                    case 'end':
                        return _context23.stop();
                }
            }
        }, _callee23, undefined);
    }));

    return function (_x23) {
        return _ref23.apply(this, arguments);
    };
}();

TrezorConnect.liskGetAddress = function () {
    var _ref24 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee24(params) {
        return _regenerator2.default.wrap(function _callee24$(_context24) {
            while (1) {
                switch (_context24.prev = _context24.next) {
                    case 0:
                        _context24.next = 2;
                        return call((0, _extends3.default)({ method: 'liskGetAddress' }, params));

                    case 2:
                        return _context24.abrupt('return', _context24.sent);

                    case 3:
                    case 'end':
                        return _context24.stop();
                }
            }
        }, _callee24, undefined);
    }));

    return function (_x24) {
        return _ref24.apply(this, arguments);
    };
}();

TrezorConnect.liskGetPublicKey = function () {
    var _ref25 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee25(params) {
        return _regenerator2.default.wrap(function _callee25$(_context25) {
            while (1) {
                switch (_context25.prev = _context25.next) {
                    case 0:
                        _context25.next = 2;
                        return call((0, _extends3.default)({ method: 'liskGetPublicKey' }, params));

                    case 2:
                        return _context25.abrupt('return', _context25.sent);

                    case 3:
                    case 'end':
                        return _context25.stop();
                }
            }
        }, _callee25, undefined);
    }));

    return function (_x25) {
        return _ref25.apply(this, arguments);
    };
}();

TrezorConnect.liskSignMessage = function () {
    var _ref26 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee26(params) {
        return _regenerator2.default.wrap(function _callee26$(_context26) {
            while (1) {
                switch (_context26.prev = _context26.next) {
                    case 0:
                        _context26.next = 2;
                        return call((0, _extends3.default)({ method: 'liskSignMessage' }, params));

                    case 2:
                        return _context26.abrupt('return', _context26.sent);

                    case 3:
                    case 'end':
                        return _context26.stop();
                }
            }
        }, _callee26, undefined);
    }));

    return function (_x26) {
        return _ref26.apply(this, arguments);
    };
}();

TrezorConnect.liskSignTransaction = function () {
    var _ref27 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee27(params) {
        return _regenerator2.default.wrap(function _callee27$(_context27) {
            while (1) {
                switch (_context27.prev = _context27.next) {
                    case 0:
                        _context27.next = 2;
                        return call((0, _extends3.default)({ method: 'liskSignTransaction' }, params));

                    case 2:
                        return _context27.abrupt('return', _context27.sent);

                    case 3:
                    case 'end':
                        return _context27.stop();
                }
            }
        }, _callee27, undefined);
    }));

    return function (_x27) {
        return _ref27.apply(this, arguments);
    };
}();

TrezorConnect.liskVerifyMessage = function () {
    var _ref28 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee28(params) {
        return _regenerator2.default.wrap(function _callee28$(_context28) {
            while (1) {
                switch (_context28.prev = _context28.next) {
                    case 0:
                        _context28.next = 2;
                        return call((0, _extends3.default)({ method: 'liskVerifyMessage' }, params));

                    case 2:
                        return _context28.abrupt('return', _context28.sent);

                    case 3:
                    case 'end':
                        return _context28.stop();
                }
            }
        }, _callee28, undefined);
    }));

    return function (_x28) {
        return _ref28.apply(this, arguments);
    };
}();

TrezorConnect.nemGetAddress = function () {
    var _ref29 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee29(params) {
        return _regenerator2.default.wrap(function _callee29$(_context29) {
            while (1) {
                switch (_context29.prev = _context29.next) {
                    case 0:
                        _context29.next = 2;
                        return call((0, _extends3.default)({ method: 'nemGetAddress' }, params));

                    case 2:
                        return _context29.abrupt('return', _context29.sent);

                    case 3:
                    case 'end':
                        return _context29.stop();
                }
            }
        }, _callee29, undefined);
    }));

    return function (_x29) {
        return _ref29.apply(this, arguments);
    };
}();

TrezorConnect.nemSignTransaction = function () {
    var _ref30 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee30(params) {
        return _regenerator2.default.wrap(function _callee30$(_context30) {
            while (1) {
                switch (_context30.prev = _context30.next) {
                    case 0:
                        _context30.next = 2;
                        return call((0, _extends3.default)({ method: 'nemSignTransaction' }, params));

                    case 2:
                        return _context30.abrupt('return', _context30.sent);

                    case 3:
                    case 'end':
                        return _context30.stop();
                }
            }
        }, _callee30, undefined);
    }));

    return function (_x30) {
        return _ref30.apply(this, arguments);
    };
}();

TrezorConnect.pushTransaction = function () {
    var _ref31 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee31(params) {
        return _regenerator2.default.wrap(function _callee31$(_context31) {
            while (1) {
                switch (_context31.prev = _context31.next) {
                    case 0:
                        _context31.next = 2;
                        return call((0, _extends3.default)({ method: 'pushTransaction' }, params));

                    case 2:
                        return _context31.abrupt('return', _context31.sent);

                    case 3:
                    case 'end':
                        return _context31.stop();
                }
            }
        }, _callee31, undefined);
    }));

    return function (_x31) {
        return _ref31.apply(this, arguments);
    };
}();

TrezorConnect.rippleGetAddress = function () {
    var _ref32 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee32(params) {
        return _regenerator2.default.wrap(function _callee32$(_context32) {
            while (1) {
                switch (_context32.prev = _context32.next) {
                    case 0:
                        _context32.next = 2;
                        return call((0, _extends3.default)({ method: 'rippleGetAddress' }, params));

                    case 2:
                        return _context32.abrupt('return', _context32.sent);

                    case 3:
                    case 'end':
                        return _context32.stop();
                }
            }
        }, _callee32, undefined);
    }));

    return function (_x32) {
        return _ref32.apply(this, arguments);
    };
}();

TrezorConnect.rippleSignTransaction = function () {
    var _ref33 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee33(params) {
        return _regenerator2.default.wrap(function _callee33$(_context33) {
            while (1) {
                switch (_context33.prev = _context33.next) {
                    case 0:
                        _context33.next = 2;
                        return call((0, _extends3.default)({ method: 'rippleSignTransaction' }, params));

                    case 2:
                        return _context33.abrupt('return', _context33.sent);

                    case 3:
                    case 'end':
                        return _context33.stop();
                }
            }
        }, _callee33, undefined);
    }));

    return function (_x33) {
        return _ref33.apply(this, arguments);
    };
}();

TrezorConnect.signMessage = function () {
    var _ref34 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee34(params) {
        return _regenerator2.default.wrap(function _callee34$(_context34) {
            while (1) {
                switch (_context34.prev = _context34.next) {
                    case 0:
                        _context34.next = 2;
                        return call((0, _extends3.default)({ method: 'signMessage' }, params));

                    case 2:
                        return _context34.abrupt('return', _context34.sent);

                    case 3:
                    case 'end':
                        return _context34.stop();
                }
            }
        }, _callee34, undefined);
    }));

    return function (_x34) {
        return _ref34.apply(this, arguments);
    };
}();

TrezorConnect.signTransaction = function () {
    var _ref35 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee35(params) {
        return _regenerator2.default.wrap(function _callee35$(_context35) {
            while (1) {
                switch (_context35.prev = _context35.next) {
                    case 0:
                        _context35.next = 2;
                        return call((0, _extends3.default)({ method: 'signTransaction' }, params));

                    case 2:
                        return _context35.abrupt('return', _context35.sent);

                    case 3:
                    case 'end':
                        return _context35.stop();
                }
            }
        }, _callee35, undefined);
    }));

    return function (_x35) {
        return _ref35.apply(this, arguments);
    };
}();

TrezorConnect.stellarGetAddress = function () {
    var _ref36 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee36(params) {
        return _regenerator2.default.wrap(function _callee36$(_context36) {
            while (1) {
                switch (_context36.prev = _context36.next) {
                    case 0:
                        _context36.next = 2;
                        return call((0, _extends3.default)({ method: 'stellarGetAddress' }, params));

                    case 2:
                        return _context36.abrupt('return', _context36.sent);

                    case 3:
                    case 'end':
                        return _context36.stop();
                }
            }
        }, _callee36, undefined);
    }));

    return function (_x36) {
        return _ref36.apply(this, arguments);
    };
}();

TrezorConnect.stellarSignTransaction = function () {
    var _ref37 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee37(params) {
        return _regenerator2.default.wrap(function _callee37$(_context37) {
            while (1) {
                switch (_context37.prev = _context37.next) {
                    case 0:
                        _context37.next = 2;
                        return call((0, _extends3.default)({ method: 'stellarSignTransaction' }, params));

                    case 2:
                        return _context37.abrupt('return', _context37.sent);

                    case 3:
                    case 'end':
                        return _context37.stop();
                }
            }
        }, _callee37, undefined);
    }));

    return function (_x37) {
        return _ref37.apply(this, arguments);
    };
}();

TrezorConnect.verifyMessage = function () {
    var _ref38 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee38(params) {
        return _regenerator2.default.wrap(function _callee38$(_context38) {
            while (1) {
                switch (_context38.prev = _context38.next) {
                    case 0:
                        _context38.next = 2;
                        return call((0, _extends3.default)({ method: 'verifyMessage' }, params));

                    case 2:
                        return _context38.abrupt('return', _context38.sent);

                    case 3:
                    case 'end':
                        return _context38.stop();
                }
            }
        }, _callee38, undefined);
    }));

    return function (_x38) {
        return _ref38.apply(this, arguments);
    };
}();

TrezorConnect.dispose = function () {
    // TODO
};

TrezorConnect.renderWebUSBButton = function (className) {
    (0, _button2.default)(className, _settings.webusbSrc, iframe.origin);
};

exports.default = TrezorConnect;
exports.TRANSPORT = TRANSPORT;
exports.UI = UI;
exports.DEVICE = DEVICE;
exports.BLOCKCHAIN = BLOCKCHAIN;
exports.UI_EVENT = _constants.UI_EVENT;
exports.DEVICE_EVENT = _constants.DEVICE_EVENT;
exports.TRANSPORT_EVENT = _constants.TRANSPORT_EVENT;
exports.BLOCKCHAIN_EVENT = _constants.BLOCKCHAIN_EVENT;