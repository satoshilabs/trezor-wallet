'use strict';

exports.__esModule = true;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

var _popup = require('../constants/popup');

var POPUP = _interopRequireWildcard(_popup);

var _errors = require('../constants/errors');

var ERROR = _interopRequireWildcard(_errors);

var _showPopupRequest = require('./showPopupRequest');

var _networkUtils = require('../utils/networkUtils');

var _deferred = require('../utils/deferred');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// const POPUP_REQUEST_TIMEOUT: number = 602;
var POPUP_REQUEST_TIMEOUT = 999;
var POPUP_CLOSE_INTERVAL = 500;
var POPUP_OPEN_TIMEOUT = 2000;

var PopupManager = function (_EventEmitter) {
    (0, _inherits3.default)(PopupManager, _EventEmitter);

    function PopupManager(settings) {
        (0, _classCallCheck3.default)(this, PopupManager);

        var _this = (0, _possibleConstructorReturn3.default)(this, _EventEmitter.call(this));

        _this.requestTimeout = 0;
        _this.closeInterval = 0;
        _this.extension = false;
        _this.extensionTabId = 0;

        _this.settings = settings;
        _this.src = settings.popupSrc;
        _this.origin = (0, _networkUtils.getOrigin)(settings.popupSrc);
        _this.handleLazyLoading = _this.handleLazyLoading.bind(_this);
        // $FlowIssue chrome not declared outside
        _this.extension = typeof chrome !== 'undefined' && chrome.runtime && typeof chrome.runtime.onConnect !== 'undefined';
        if (_this.extension) {
            _this.handleExtensionConnect = _this.handleExtensionConnect.bind(_this);
            _this.handleExtensionMessage = _this.handleExtensionMessage.bind(_this);
            // $FlowIssue chrome not declared outside
            chrome.runtime.onConnect.addListener(_this.handleExtensionConnect);
        }
        return _this;
    }
    // $FlowIssue chrome not declared outside
    // Window


    PopupManager.prototype.request = function request() {
        var _this2 = this;

        var lazyLoad = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

        // popup request
        // TODO: ie - open imediately and hide it but post handshake after timeout

        // bring popup window to front
        if (this.locked) {
            if (this._window) {
                if (this.extension) {
                    // $FlowIssue chrome not declared outside
                    chrome.tabs.update(this._window.id, { active: true });
                } else {
                    this._window.focus();
                }
            }
            return;
        }

        this.lazyLoad = lazyLoad ? (0, _deferred.create)(POPUP.INIT) : null;
        if (this.lazyLoad) {
            if (!this.extension) {
                window.addEventListener('message', this.handleLazyLoading, false);
            }
        }

        var openFn = this.open.bind(this);
        this.locked = true;
        if (!this.settings.supportedBrowser) {
            openFn();
        } else {
            this.requestTimeout = window.setTimeout(function () {
                _this2.requestTimeout = 0;
                openFn();
            }, lazyLoad || this.extension ? 1 : POPUP_REQUEST_TIMEOUT);
        }
    };

    PopupManager.prototype.cancel = function cancel() {
        this.close();
    };

    PopupManager.prototype.unlock = function unlock() {
        this.locked = false;
    };

    PopupManager.prototype.open = function open() {
        var _this3 = this;

        if (!this.settings.supportedBrowser) {
            this.openWrapper(this.src + '#unsupported');
            return;
        }

        this.openWrapper(this.lazyLoad ? this.src + '#loading' : this.src);

        this.closeInterval = window.setInterval(function () {
            if (_this3._window) {
                if (_this3.extension) {
                    // $FlowIssue chrome not declared outside
                    chrome.tabs.get(_this3._window.id, function (tab) {
                        if (!tab) {
                            _this3.close();
                            _this3.emit(POPUP.CLOSED);
                        }
                    });
                } else if (_this3._window.closed) {
                    _this3.close();
                    _this3.emit(POPUP.CLOSED);
                }
            }
        }, POPUP_CLOSE_INTERVAL);

        this.openTimeout = window.setTimeout(function () {
            if (!(_this3._window && !_this3._window.closed)) {
                _this3.close();
                (0, _showPopupRequest.showPopupRequest)(_this3.open.bind(_this3), function () {
                    _this3.emit(POPUP.CLOSED);
                });
            }
        }, POPUP_OPEN_TIMEOUT);
    };

    PopupManager.prototype.openWrapper = function openWrapper(url) {
        var _this4 = this;

        if (this.extension) {
            // $FlowIssue chrome not declared outside
            chrome.windows.getCurrent(null, function (currentWindow) {
                // Request comming from extension popup,
                // create new window above instead of opening new tab
                if (currentWindow.type !== 'normal') {
                    // $FlowIssue chrome not declared outside
                    chrome.windows.create({ url: url }, function (newWindow) {
                        // $FlowIssue chrome not declared outside
                        chrome.tabs.query({
                            windowId: newWindow.id,
                            active: true
                        }, function (tabs) {
                            _this4._window = tabs[0];
                        });
                    });
                } else {
                    // $FlowIssue chrome not declared outside
                    chrome.tabs.query({
                        currentWindow: true,
                        active: true
                    }, function (tabs) {
                        _this4.extensionTabId = tabs[0].id;
                        // $FlowIssue chrome not declared outside
                        chrome.tabs.create({
                            url: url,
                            index: tabs[0].index + 1
                        }, function (tab) {
                            _this4._window = tab;
                        });
                    });
                }
            });
        } else {
            this._window = window.open('', '_blank');
            if (this._window) {
                this._window.location.href = url; // otherwise android/chrome loose window.opener reference
            }
        }
    };

    PopupManager.prototype.handleExtensionConnect = function handleExtensionConnect(port) {
        if (port.name === 'trezor-connect') {
            if (!this._window || this._window && this._window.id !== port.sender.tab.id) {
                port.disconnect();
                return;
            }
            this.extensionPort = port;
            this.extensionPort.onMessage.addListener(this.handleExtensionMessage);
        } else if (port.name === 'trezor-usb-permissions') {
            port.postMessage({ broadcast: this.broadcast });
        }
    };

    PopupManager.prototype.handleExtensionMessage = function handleExtensionMessage(message) {
        if (!this.extensionPort) return;
        if (message === POPUP.EXTENSION_REQUEST) {
            this.extensionPort.postMessage({ type: POPUP.EXTENSION_REQUEST, broadcast: this.broadcast });
        } else if (message === POPUP.INIT && this.lazyLoad) {
            this.lazyLoad.resolve(true);
        } else if (message === POPUP.EXTENSION_USB_PERMISSIONS) {
            // $FlowIssue chrome not declared outside
            chrome.tabs.query({
                currentWindow: true,
                active: true
            }, function (tabs) {
                // $FlowIssue chrome not declared outside
                chrome.tabs.create({
                    url: 'trezor-usb-permissions.html',
                    index: tabs[0].index + 1
                }, function (tab) {
                    // do nothing
                });
            });
        } else if (message === 'window.close') {
            this.emit(POPUP.CLOSED);
            this.close();
        }
    };

    PopupManager.prototype.setBroadcast = function setBroadcast(broadcast) {
        this.broadcast = broadcast;
    };

    PopupManager.prototype.handleLazyLoading = function handleLazyLoading(event) {
        if (this.lazyLoad && event.data && event.data === POPUP.INIT) {
            this.lazyLoad.resolve(true);
            window.removeEventListener('message', this.handleLazyLoading, false);
        }
    };

    PopupManager.prototype.resolveLazyLoad = function () {
        var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
            return _regenerator2.default.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            if (!this.lazyLoad) {
                                _context.next = 5;
                                break;
                            }

                            _context.next = 3;
                            return this.lazyLoad.promise;

                        case 3:
                            _context.next = 6;
                            break;

                        case 5:
                            throw ERROR.POPUP_CLOSED.message;

                        case 6:

                            if (this.extension) {
                                if (this.extensionPort) {
                                    this.extensionPort.postMessage({ type: POPUP.INIT });
                                }
                            } else if (this._window) {
                                this._window.postMessage({ type: POPUP.INIT }, this.origin);
                            }

                        case 7:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this);
        }));

        function resolveLazyLoad() {
            return _ref.apply(this, arguments);
        }

        return resolveLazyLoad;
    }();

    PopupManager.prototype.close = function close() {
        this.locked = false;

        if (this.requestTimeout) {
            window.clearTimeout(this.requestTimeout);
            this.requestTimeout = 0;
        }

        if (this.openTimeout) {
            window.clearTimeout(this.openTimeout);
            this.openTimeout = 0;
        }
        if (this.closeInterval) {
            window.clearInterval(this.closeInterval);
            this.closeInterval = 0;
        }

        if (this.extensionPort) {
            this.extensionPort.disconnect();
            this.extensionPort = null;
        }

        if (this.extensionTabId) {
            // $FlowIssue chrome not declared outside
            chrome.tabs.update(this.extensionTabId, { active: true });
            this.extensionTabId = 0;
        }

        if (this.lazyLoad) {
            this.lazyLoad = null;
        }

        if (this._window) {
            if (this.extension) {
                // $FlowIssue chrome not declared outside
                chrome.tabs.remove(this._window.id);
            } else {
                this._window.close();
            }
            this._window = null;
        }
    };

    PopupManager.prototype.postMessage = function postMessage(message) {
        var _this5 = this;

        // post message before popup request finalized
        if (this.requestTimeout) {
            return;
        }

        // device needs interaction but there is no popup/ui
        // maybe popup request wasn't handled
        // ignore "ui_request_window" type
        if (!this._window && message.type !== 'ui_request_window' && this.openTimeout) {
            this.close();
            (0, _showPopupRequest.showPopupRequest)(this.open.bind(this), function () {
                _this5.emit(POPUP.CLOSED);
            });
            return;
        }

        // post message to popup window
        if (this._window) {
            this._window.postMessage(message, this.origin);
        }
    };

    PopupManager.prototype.onBeforeUnload = function onBeforeUnload() {
        this.close();
    };

    PopupManager.prototype.cancelOpenTimeout = function cancelOpenTimeout() {
        window.clearTimeout(this.openTimeout);
    };

    return PopupManager;
}(_events2.default);

exports.default = PopupManager;