'use strict';

// https://stackoverflow.com/questions/7505623/colors-in-javascript-console
// https://github.com/pimterry/loglevel/blob/master/lib/loglevel.js

// http://www.color-hex.com/color-palette/5016

exports.__esModule = true;
exports.popupConsole = exports.enableByPrefix = exports.getLog = exports.enable = exports.init = undefined;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var colors = {
    // green
    'DescriptorStream': 'color: #77ab59',
    'DeviceList': 'color: #36802d',
    'Device': 'color: #bada55',
    'Core': 'color: #c9df8a',
    'IFrame': 'color: #FFFFFF; background: #f4a742;',
    'Popup': 'color: #f48a00'
};

var Log = function () {
    function Log(prefix) {
        var enabled = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        (0, _classCallCheck3.default)(this, Log);

        this.prefix = prefix;
        this.enabled = enabled;
        this.messages = [];
        this.css = colors[prefix] || 'color: #000000; background: #FFFFFF;';
    }

    Log.prototype.addMessage = function addMessage(level, prefix) {
        for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
            args[_key - 2] = arguments[_key];
        }

        this.messages.push({
            level: level,
            prefix: prefix,
            message: args,
            timestamp: new Date().getTime()
        });
    };

    Log.prototype.log = function log() {
        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
        }

        this.addMessage.apply(this, ['log', this.prefix].concat(args));
        if (this.enabled) {
            var _console;

            (_console = console).log.apply(_console, [this.prefix].concat(args));
        }
    };

    Log.prototype.error = function error() {
        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
        }

        this.addMessage.apply(this, ['error', this.prefix].concat(args));
        if (this.enabled) {
            var _console2;

            (_console2 = console).error.apply(_console2, [this.prefix].concat(args));
        }
    };

    Log.prototype.warn = function warn() {
        for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            args[_key4] = arguments[_key4];
        }

        this.addMessage.apply(this, ['warn', this.prefix].concat(args));
        if (this.enabled) {
            var _console3;

            (_console3 = console).warn.apply(_console3, [this.prefix].concat(args));
        }
    };

    Log.prototype.debug = function debug() {
        for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
            args[_key5] = arguments[_key5];
        }

        this.addMessage.apply(this, ['debug', this.prefix].concat(args));
        if (this.enabled) {
            var _console4;

            (_console4 = console).log.apply(_console4, ['%c' + this.prefix, this.css].concat(args));
        }
    };

    return Log;
}();

exports.default = Log;


var _logs = {};

var init = exports.init = function init(prefix, enabled) {
    var enab = typeof enabled === 'boolean' ? enabled : false;
    var instance = new Log(prefix, enab);
    _logs[prefix] = instance;
    return instance;
};

var enable = exports.enable = function enable(enabled) {
    for (var _iterator = Object.keys(_logs), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
        var _ref;

        if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref = _iterator[_i++];
        } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref = _i.value;
        }

        var l = _ref;

        _logs[l].enabled = enabled;
    }
};

var getLog = exports.getLog = function getLog(args) {
    // if
    var logs = [];
    for (var _iterator2 = Object.keys(_logs), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
        var _ref2;

        if (_isArray2) {
            if (_i2 >= _iterator2.length) break;
            _ref2 = _iterator2[_i2++];
        } else {
            _i2 = _iterator2.next();
            if (_i2.done) break;
            _ref2 = _i2.value;
        }

        var l = _ref2;

        logs = logs.concat(_logs[l].messages);
    }
    logs.sort(function (a, b) {
        return a.timestamp - b.timestamp;
    });
    return logs;
};

var enableByPrefix = exports.enableByPrefix = function enableByPrefix(prefix, enabled) {
    if (_logs[prefix]) {
        _logs[prefix].enabled = enabled;
    }
};

// TODO: enable/disable log at runtime
var popupConsole = exports.popupConsole = function popupConsole(tag, postMessage) {
    var c = global.console;
    var orig = {
        error: c.error,
        // warn: c.warn,
        info: c.info,
        debug: c.debug,
        log: c.log
    };
    var log = [];

    var inject = function inject(method, level) {
        return function () {
            for (var _len6 = arguments.length, args = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
                args[_key6] = arguments[_key6];
            }

            // args.unshift('[popup.js]');
            var time = new Date().toUTCString();
            log.push([level, time].concat(args));
            postMessage.apply(undefined, [{ type: tag, level: level, time: time, args: JSON.stringify(args) }]
            // { type: 'LOG', level: level, time: time, args: JSON.stringify(deepClone(args)) }
            );
            return method.apply(c, args);
        };
    };

    for (var _level in orig) {
        c[_level] = inject(orig[_level], _level);
    }
};