'use strict';

exports.__esModule = true;
exports.getOrigin = exports.httpRequest = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

require('whatwg-fetch');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var httpRequest = exports.httpRequest = function () {
    var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(url) {
        var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'text';
        var response, txt;
        return _regenerator2.default.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        _context.next = 2;
                        return fetch(url, { credentials: 'same-origin' });

                    case 2:
                        response = _context.sent;

                        if (!response.ok) {
                            _context.next = 22;
                            break;
                        }

                        if (!(type === 'json')) {
                            _context.next = 11;
                            break;
                        }

                        _context.next = 7;
                        return response.text();

                    case 7:
                        txt = _context.sent;
                        return _context.abrupt('return', JSON.parse(txt));

                    case 11:
                        if (!(type === 'binary')) {
                            _context.next = 17;
                            break;
                        }

                        _context.next = 14;
                        return response.arrayBuffer();

                    case 14:
                        return _context.abrupt('return', _context.sent);

                    case 17:
                        _context.next = 19;
                        return response.text();

                    case 19:
                        return _context.abrupt('return', _context.sent);

                    case 20:
                        _context.next = 23;
                        break;

                    case 22:
                        throw new Error('httpRequest error: ' + url + ' ' + response.statusText);

                    case 23:
                    case 'end':
                        return _context.stop();
                }
            }
        }, _callee, undefined);
    }));

    return function httpRequest(_x2) {
        return _ref.apply(this, arguments);
    };
}();

var getOrigin = exports.getOrigin = function getOrigin(url) {
    // eslint-disable-next-line no-irregular-whitespace, no-useless-escape
    var parts = url.match(/^.+\:\/\/[^\‌​/]+/);
    return Array.isArray(parts) && parts.length > 0 ? parts[0] : 'unknown';
};